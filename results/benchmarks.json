{
    "benchmarks.MemSuite.mem_list": {
        "code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256",
        "name": "benchmarks.MemSuite.mem_list",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"
    },
    "benchmarks.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_range": {
        "code": "class TimeSuite:\n    def time_range(self):\n        d = self.d\n        for key in range(500):\n            x = d[key]\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_range",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cc3e85248a6284df968bcf8afe866da285261eb2487c10e9dd9e2d17a05deb47",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_values": {
        "code": "class TimeSuite:\n    def time_values(self):\n        for value in self.d.values():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cace9f2d006aa364dcf5762823afba3680c2fb50179ee30beaf880c0697256e2",
        "warmup_time": -1
    },
    "simple_LP_benchmarks.SimpleFullyParametrizedLPBenchmark.time_get_problem_instance": {
        "code": "class SimpleFullyParametrizedLPBenchmark:\n    def time_get_problem_instance() -> cp.Problem:\n        n = int(1e4)\n        p = cp.Parameter(n)\n        x = cp.Variable(n)\n        objective = cp.Minimize(p @ x)\n        constraints = [0 <= x, x <= 1]\n        problem = cp.Problem(objective, constraints)\n        return problem",
        "min_run_count": 2,
        "name": "simple_LP_benchmarks.SimpleFullyParametrizedLPBenchmark.time_get_problem_instance",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e0061762f5ccfbdcdb428737a4728dbffc030ce7ef767469474c6e396bf6689f",
        "warmup_time": -1
    },
    "simple_LP_benchmarks.SimpleLPBenchmark.time_get_problem_instance": {
        "code": "class SimpleLPBenchmark:\n    def time_get_problem_instance() -> cp.Problem:\n        n = int(1e7)\n        c = np.arange(n)\n        x = cp.Variable(n)\n        objective = cp.Minimize(c @ x)\n        constraints = [0 <= x, x <= 1]\n        problem = cp.Problem(objective, constraints)\n        return problem",
        "min_run_count": 2,
        "name": "simple_LP_benchmarks.SimpleLPBenchmark.time_get_problem_instance",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ca1844cc2a3af7de0f7291471eea7da17e56ec6f5e102c268d842bddc37447a8",
        "warmup_time": -1
    },
    "simple_LP_benchmarks.SimpleScalarParametrizedLPBenchmark.time_get_problem_instance": {
        "code": "class SimpleScalarParametrizedLPBenchmark:\n    def time_get_problem_instance() -> cp.Problem:\n        n = int(1e6)\n        p = cp.Parameter()\n        c = np.arange(n)\n        x = cp.Variable(n)\n        objective = cp.Minimize((p * c) @ x)\n        constraints = [0 <= x, x <= 1]\n        problem = cp.Problem(objective, constraints)\n        return problem",
        "min_run_count": 2,
        "name": "simple_LP_benchmarks.SimpleScalarParametrizedLPBenchmark.time_get_problem_instance",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9f056bcca18a93ea4a0d79e692bba02a69eed5997835c5bce878c957841caac3",
        "warmup_time": -1
    },
    "version": 2
}